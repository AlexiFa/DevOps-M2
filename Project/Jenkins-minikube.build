pipeline {
    agent {
        label 'jenkins-slave'
    }

    environment {
        APP_IMAGE = "efrei2023/project-alexah:2001" // Nom et tag de l'image Docker
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
    }

    stages {
        stage('Cloning Git') {
            steps {
                git branch: 'main', url: 'https://github.com/AlexiFa/DevOps-M2'
            }
        }

        stage('Building Application Image') {
            steps {
                script {
                    dir('Project/webapi') {
                        sh 'pack build ${APP_IMAGE} --path . --builder paketobuilpacks/builder:base'
                    }
                }
            }
        }

        stage('Publishing Application Image') {
            steps {
                sh '''
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    docker push ${APP_IMAGE}
                '''
            }
        }

        stage('Deploy Application in dev') {
            steps {
                dir('Project') {
                    sh 'kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -'
                    sh """
                        kubectl apply -f deployment.yml -n dev
                        kubectl apply -f service.yml -n dev

                        kubectl rollout status deployment/webapi-deployment -n dev
                    """
                }
            }
        }

        stage('Test deployment dev'){
            steps{
                script{
                    sh """
                        export SERVICE_IP=\$(minikube ip)
                        export NODE_PORT=\$(kubectl get service webapi-service -n dev -o jsonpath='{.spec.ports[0].nodePort}')
                        export SERVICE_URL="http://\$SERVICE_IP:\$NODE_PORT"

                        response_code=\$(curl -s -o /dev/null -w "%{http_code}" \$SERVICE_URL/whoami)
                        if [ "\$response_code" != "200" ]; then
                            echo "service is not healthy code: \$response_code"
                            exit 1
                        fi
                    """
                }
            }
        }

        stage('Deploy in prod'){
            steps {
                dir('Project') {
                    sh "kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -"
                    sh """
                        kubectl apply -f deployment.yml -n prod
                        kubectl apply -f service.yml -n prod

                        kubectl rollout status deployment/webapi-deployment -n prod
                    """
                }
            }
        }
    }

}
